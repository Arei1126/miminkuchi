gatt
: 
BluetoothRemoteGATTServer
connected
: 
false
device
: 
BluetoothDevice
gatt
: 
BluetoothRemoteGATTServer {device: BluetoothDevice, connected: false}
id
: 
"mX2ob6oCIQkEE6hbKyB5zA=="
name
: 
"D58A-2"
onadvertisementreceived
: 
null
ongattserverdisconnected
: 
null
watchingAdvertisements
: 
false


		/*

		function katakanaToHiragana(katakana) {
			return katakana.replace(/[\u30A1-\u30F6]/g, function(match) {
				// カタカナのコードポイントをひらがなのコードポイントに変換
				return String.fromCharCode(match.charCodeAt(0) - 0x60);
			});
		}
		function hiraganaToHebon(hiragana) {
			const map = {
				'あ': 'a', 'い': 'i', 'う': 'u', 'え': 'e', 'お': 'o',
				'か': 'ka', 'き': 'ki', 'く': 'ku', 'け': 'ke', 'こ': 'ko',
				'さ': 'sa', 'し': 'shi', 'す': 'su', 'せ': 'se', 'そ': 'so',
				'た': 'ta', 'ち': 'chi', 'つ': 'tsu', 'て': 'te', 'と': 'to',
				'な': 'na', 'に': 'ni', 'ぬ': 'nu', 'ね': 'ne', 'の': 'no',
				'は': 'ha', 'ひ': 'hi', 'ふ': 'fu', 'へ': 'he', 'ほ': 'ho',
				'ま': 'ma', 'み': 'mi', 'む': 'mu', 'め': 'me', 'も': 'mo',
				'や': 'ya', 'ゆ': 'yu', 'よ': 'yo',
				'ら': 'ra', 'り': 'ri', 'る': 'ru', 'れ': 're', 'ろ': 'ro',
				'わ': 'wa', 'を': 'wo', 'ん': 'n',
				'が': 'ga', 'ぎ': 'gi', 'ぐ': 'gu', 'げ': 'ge', 'ご': 'go',
				'ざ': 'za', 'じ': 'ji', 'ず': 'zu', 'ぜ': 'ze', 'ぞ': 'zo',
				'だ': 'da', 'ぢ': 'ji', 'づ': 'zu', 'で': 'de', 'ど': 'do',
				'ば': 'ba', 'び': 'bi', 'ぶ': 'bu', 'べ': 'be', 'ぼ': 'bo',
				'ぱ': 'pa', 'ぴ': 'pi', 'ぷ': 'pu', 'ぺ': 'pe', 'ぽ': 'po',
				// 拗音
				'きゃ': 'kya', 'きゅ': 'kyu', 'きょ': 'kyo',
				'しゃ': 'sha', 'しゅ': 'shu', 'しょ': 'sho',
				'ちゃ': 'cha', 'ちゅ': 'chu', 'ちょ': 'cho',
				'にゃ': 'nya', 'にゅ': 'nyu', 'にょ': 'nyo',
				'ひゃ': 'hya', 'ひゅ': 'hyu', 'ひょ': 'hyo',
				'みゃ': 'mya', 'みゅ': 'myu', 'みょ': 'myo',
				'りゃ': 'rya', 'りゅ': 'ryu', 'りょ': 'ryo',
				// 長音
				'ああ': 'aa', 'いい': 'ii', 'うう': 'uu', 'ええ': 'ee', 'おお': 'oo',
			};

			return hiragana.split('').map(char => map[char] || char).join('');
		}

		// 使用例
		let kana = kanalist.join("");
		console.log(kana);
		kana = kana.normalize("NFC");
		const hira = katakanaToHiragana(kana);
		console.log(hira)
		const hebon = hiraganaToHebon(hira)
		console.log(hebon);

		const textEncoder = new TextEncoder();
		let hebon2 = textEncoder.encode(hebon);
		const cmd = new Uint8Array(hebon2.length + 5)
		for (let i = 0; i < hebon2.length; i++){
			cmd[i] = hebon2[i];
		}
		cmd[hebon2.lenght] = 0x0A;
		cmd[hebon2.lenght + 1] = 0x09;
		cmd[hebon2.lenght + 2] = 0x0A;
		cmd[hebon2.lenght + 3] = 0x20;
		cmd[hebon2.lenght + 4] = 0x0A;
		console.log(cmd);
		*/


